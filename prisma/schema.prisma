generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Companys {
  id            String      @id @default(uuid())
  token         String      @unique @default(uuid())
  name          String      @db.VarChar(180)
  fantasy_name  String      @db.VarChar(180)
  email         String      @unique @db.VarChar(180)
  phone         String      @db.VarChar(20)
  document      String?     @unique @db.VarChar(20)
  actived       Boolean     @default(false)
  max_sessions  Int         @default(1)
  webhook       String      @unique @db.VarChar(255)
  webhook_token String?     @unique @db.VarChar(155)
  ambient       TypeAmbient @default(DEVELOPMENT)
  sessions      Sessions?

  @@map("companys")
}

model Accounts {
  id           String      @id @default(uuid())
  actived      Boolean     @default(false)
  access_level AccessLevel
  name         String      @db.VarChar(180)
  email        String      @unique @db.VarChar(180)
  password     String
  avatar       String?     @db.VarChar(255)
  company_id   String

  created_at DateTime @default(now()) @db.Date
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp

  messages Messages[]

  @@map("accounts")
}

enum AccessLevel {
  DEVELOPER
  ADMINISTRATOR
  ATTENDANTS
}

enum TypeAmbient {
  SANDBOX
  DEVELOPMENT
  PRODUCTION
}

model Plans {
  id String @id @default(uuid())

  @@map("plans")
}

model Sessions {
  id               String @id @default(uuid())
  companys_id      String @unique
  status           String @db.VarChar(80)
  wa_browser_id    String @db.Text
  wa_secret_bundle String @db.Text
  wa_token1        String @db.Text
  wa_token2        String @db.Text

  created_at DateTime @default(now()) @db.Date
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp

  companys Companys @relation(fields: [companys_id], references: [id])

  @@map("sessions")
}

model Messages {
  id         String @id @default(uuid())
  account_id String

  accounts Accounts? @relation(fields: [account_id], references: [id])

  @@map("messages")
}

model ContactsGroups {
  id   String @id @db.VarChar()
  name String @db.VarChar(180)

  created_at DateTime @db.Date
  updated_at DateTime @updatedAt @db.Timestamp()

  contacts Contacts[]

  @@map("contacts_groups")
}

model Contacts {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(255)
  number   String  @db.VarChar(20)
  email    String  @db.VarChar(255)
  photo    String  @db.Text
  is_group Boolean @default(false)
  group_id String

  created_at DateTime @db.Date
  updated_at DateTime @updatedAt @db.Timestamp()

  groups ContactsGroups[]

  @@map("contacts")
}
